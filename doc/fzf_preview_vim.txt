*fzf-preview-vim.txt*

Author:  yuki-yano
License: MIT
Version: 0.1


==============================================================================
CONTENTS                                   *fzf-preview-contents*
    Introduction                           |fzf-preview-introduction|
    Installation                           |fzf-preview-installation|
    Mappings                               |fzf-preview-mappings|
    Commands                               |fzf-preview-commands|
    Keymap                                 |fzf-preview-keymap|

==============================================================================
INTRODUCTION                              *fzf-preview-introduction*

*fzf-preview* is a Neovim plugin to provide some fzf sources with preview.

Requirements:
- Neovim
    https://neovim.io/

- Node
    https://nodejs.org/

- git
    https://git-scm.com/

- fzf
    https://github.com/junegunn/fzf

- Python3 (Used grep preview)
    https://www.python.org/
    Checked with Python3.6

- ripgrep (Require some preview)
    https://github.com/BurntSushi/ripgrep

- GitHub cli (Require integrate with GitHub)
    https://github.com/cli/cli

Optional:
- bat (Add color to the preview)
    https://github.com/sharkdp/bat

- exa (Use color to the file list)
    https://github.com/ogham/exa

- vim-devicons (Use devicons)
    https://github.com/ryanoasis/vim-devicons

- vim-bookmarks (Use FzfPreviewBookmarks)
    https://github.com/MattesGroeger/vim-bookmarks

Latest version:
https://github.com/yuki-ycino/fzf-preview.vim

==============================================================================
INSTALLATION                                     *fzf-preview-installation*

Install the npm package [neovim](https://www.npmjs.com/package/neovim)
to get the remote plugin working.

>
    $ npm install -g neovim
<

Use Dein, vim-plug or any Vim plugin manager of your choice.
Execute `npm install` and `:UpdateRemotePlugins` when after installed plugin.

If you are using MacOS and installed fzf using Homebrew:
>
>
    set  runtimepath+=/usr/local/opt/fzf
    call dein#add('yuki-ycino/fzf-preview.vim', {'build': 'npm install'})
<

or Using Dein:

>
    call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
    call dein#add('yuki-ycino/fzf-preview.vim', { 'build': 'npm install' })
<

==============================================================================
COMMANDS                                        *fzf-preview-commands*

                                                *:FzfPreviewProjectFiles*
:FzfPreviewProjectFiles
     Select and open git repository files from project. 

                                                *:FzfPreviewGitFiles*
:FzfPreviewGitFiles
     Select and open git repository files from git ls-files.

                                                *:FzfPreviewDirectoryFiles*
:FzfPreviewDirectoryFiles {path or none}
     Select and open directory files from ripgrep with fzf interface.
     Default to current working directory.

                                                *:FzfPreviewGitStatus*
:FzfPreviewGitStatus
     Select files that have been changed with git.
     Use git diff preview.

                                                *:FzfPreviewBuffers*
:FzfPreviewBuffers
     Select and open file buffers.

                                                *:FzfPreviewAllBuffers*
:FzfPreviewAllBuffers
     Select and open all buffers(include not file).
     Use open-bufnr processes.
     Pass the value to the process function in the format "buffer {bufnr}""

                                                *:FzfPreviewProjectOldFiles*

:FzfPreviewProjectOldFiles
     Select and open the past open files in the project using fzf.
     The target file is selected from  |v:oldfiles|.

                                                *:FzfPreviewProjectMruFiles*
:FzfPreviewProjectMruFiles
     Select and open the past open files in the project using fzf.
     The target file is selected from most recently used.

                                                *:FzfPreviewProjectMrwFiles*
:FzfPreviewMrwFiles
     Select and open the past open files in the project using fzf.
     The target file is selected from most recently written.

                                                *:FzfPreviewProjectGrep*
:FzfPreviewProjectGrep
     Search text from the project.
     The retrieved result is displayed in file name, number of lines, preview
     and can be opened with fzf interface.

                                                *:FzfPreviewProjectCommandGrep*
:FzfPreviewProjectCommandGrep
     Search for projects with advanced integration with ripgrep.
     Since the search is done using ripgrep, FZF's fuzzy fines do not work.
     Ref: https://github.com/junegunn/fzf.vim#example-advanced-ripgrep-integration

                                                *:FzfPreviewCTags*
:FzfPreviewCtags
     Select tags from tags file
     The same script as FzfPreviewProjectGrep is used for preview.
     Required: |universal-ctags|

     Cautions:
       Set --excmd=number or --excmd=combine to universal-ctags option

                                                *:FzfPreviewBufferTags*
:FzfPreviewBufferTags
     Select from tags of currently open buffer
     The same script as FzfPreviewProjectGrep is used for preview.
     Required: |universal-ctags|

                                                *:FzfPreviewOldFiles*
:FzfPreviewOldFiles
     Select and open the opened file.
     For the target file, see |v:oldfiles|.

                                                *:FzfPreviewMruFiles*
:FzfPreviewMruFiles
     Select and open the opened file.
     For the target file, most recently used.

                                                *:FzfPreviewMrwFiles*
:FzfPreviewMrwFiles
     Select and open the opened file.
     For the target file, most recently written.

                                                *:FzfPreviewQuickFix*
:FzfPreviewQuickFix
     Select and open the QuickFix item.

                                                *:FzfPreviewLocationList*
:FzfPreviewLocationList
     Select and open the LocationList item.

                                                *:FzfPreviewLines*
:FzfPreviewLines
     Select line from current buffer.

                                                *:FzfPreviewBufferLines*
:FzfPreviewBufferLines
     Select line from all buffer

                                                *:FzfPreviewJumps*
:FzfPreviewJumps
     Select and open the jumplist

                                                *:FzfPreviewChanges*
:FzfPreviewChanges
     Select and open the changelist

                                                *:FzfPreviewMarks*
:FzfPreviewMarks
     List marks from the project.
     The retrieved result is displayed in file name, number of lines.
     The same script as FzfPreviewProjectGrep is used for preview.

                                                *:FzfPreviewFromResources*
:FzfPreviewFromResources
     Select a resource and generate a file list.
     From there, select the file using the fzf interface.

     Resources: [project, git, directory, buffer, project_old,
                 project_mru, project_mrw, old, mru, mrw]

                                                *:FzfPreviewBookmarks*
:FzfPreviewBookmarks
     Select and open the bookmarks from vim-bookmarks

                                                *:FzfPreviewYankround*
:FzfPreviewYankround
     Select register history and insert " register from yankround.vim
     Use register processes.

                                                *:FzfPreviewBlamePR*
:FzfPreviewBlamePR
     The PR corresponding to each line is displayed and
     the selected PR is opened in the browser.
     Use open-pr processes.

==============================================================================
COMMAND OPTIONS                                 *fzf-preview-command-options*

--processes
    Set process when selecting element with fzf started by this command.
    Value must be a global variable name.
    Variable is dictionary and format is
    same as get from |fzf_preview#remote#process#get_default_processes|.

    Most command pass a file paths to the process.
    FzfPreviewAllBuffers will be passed “buffer {bufnr}”

    Value example: let g:foo_processes = {
                   \ 'enter':  'FzfPreviewOpenFileEnter',
                   \ 'ctrl-x': function('s:foo_function'),
                   \ }

    Usage example: 'bdelete!' buffers
>
    augroup fzf_preview
      autocmd!
      autocmd User fzf_preview#initialized call s:fzf_preview_settings()
    augroup END

    function! s:fzf_preview_settings() abort
      let g:fzf_preview_buffer_delete_processes = fzf_preview#remote#process#get_default_processes('open-file')
      let g:fzf_preview_buffer_delete_processes['ctrl-x'] = function('s:buffers_delete_from_lines')
    endfunction

    function! s:buffers_delete_from_lines(lines) abort
      for line in a:lines
        let matches = matchlist(line, '^buffer \(\d\+\)$')
        if len(matches) >= 1
          execute 'bdelete! ' . matches[1]
        else
          execute 'bdelete! ' . line
        endif
      endfor
    endfunction

    nnoremap <silent> <Leader>b :<C-u>FzfPreviewBuffers --processes=fzf_preview_buffer_delete_processes<CR>
<

--add-fzf-arg
    Set the arguments to be passed when executing fzf.
    This value is added to the default options.
    Value must be a string without spaces.

    Usage example: Exclude filename with FzfPreviewProjectGrep
>
    nnoremap <Leader>g :<C-u>FzfPreviewProjectGrep --add-fzf-arg=--nth=3<Space>
<

--resume
    Reuse the input that was last used to select the element with fzf.
    Do not need to pass a value for this option.

    Usage example: Reuse last query for project grep.
>
    nnoremap <Leader>G :<C-u>FzfPreviewProjectGrep --resume<Space>
<

==============================================================================
OPTIONS                                         *fzf-preview-options*

*g:fzf_preview_floating_window_rate*
    This value is used for the size of the floating window.
    The size of the floating window is the size of the vim multiplied
    by this value.
    Set between 0 and 1.

    Default value is 0.9


*g:fzf_preview_quit_map*
    If this value is 1, mapping that will safely quit
    in fzf's normal mode and visual mode is added

    Default value is 1


*g:fzf_preview_command*
    Shell command used for fzf preview. The head command is used by default.
    If the bat command is installed, the bat is used by default and
    the preview is syntax highlighted.

    Not installed bat:
        Default value is 'head -100 {-1}'

    Installed bat:
        Default value is 'bat --color=always --style=grid {-1}'


*g:fzf_preview_if_binary_command*
    g:fzf_binary_preview_command is executed if this command succeeds,
    and g:fzf_preview_command is executed if it fails

    Default value is '[[ "$(file --mime {})" =~ binary ]]'


*g:fzf_binary_preview_command*
    Shell command used for binary file preview.
    Since it is heavy to display in text, if there is no particular reason,
    echo etc. substitute.

    Default value is 'echo "{} is a binary file"'


*g:fzf_preview_filelist_command*
    This is the command used to search for files in the project.
    If ripgrep is not included, git ls-files will be used.

    Installed ripgrep:
        Default value is 'rg --files --hidden --follow --no-messages --glob "!.git/*" --glob \!"* *"'

    Not installed ripgrep:
        Default value is 'git ls-files --exclude-standard'

*g:fzf_preview_git_files_command*
    This is the command used to search for files in the git repository.

    Default value is 'git ls-files --exclude-standard'


*g:fzf_preview_directory_files_command*
    This is the command used to search for files in the current directory.

    Default value is 'rg --files --hidden --follow --no-messages -g \!"* *"'

    Keep in mind a path can be append at the end of the command.


*g:fzf_preview_git_status_command*
    This is the command used to git status files

    Default value is "git status --short --untracked-files=all | awk '{if (substr($0,2,1) !~ / /) print $2}'"


*g:fzf_preview_git_status_preview_command*
    This is the command used to git status preview

    Default value is  "[[ $(git diff -- {-1}) != \"\" ]] && git diff --color=always -- {-1} || " .
                    \ "[[ $(git diff --cached -- {-1}) != \"\" ]] && git diff --cached --color=always -- {-1} || " .
                    \ g:fzf_preview_command


*g:fzf_preview_grep_cmd*
    This command is used for project grep.
    Recommend using a fast grep command such as ripgrep or ag.
    Interactively grep the specified directory.

    Installed ripgrep:
        Default value is 'rg --line-number --no-heading'

    Not installed ripgrep:
        :ProjectGrepPreview is disabled.


*g:fzf_preview_cache_directory*
    Specify the directory to store the MRU and MRW cache files.

    Default value is 'expand('~/.cache/vim/fzf_preview')'


*g:fzf_preview_lines_command*
    This command is used for get current file lines.
    Bat is recommended for coloring

    Installed bat:
        Default value is 'bat --color=always --style=grid --theme=ansi-dark --plain'

    Not installed bat:
        Default value is 'cat'


*g:fzf_preview_grep_preview_cmd*
    This command is used for :ProjectGrepPreview. bin/preview.rb is used by
    default. The format of the grep result is "{file}:{line_number}:{text}".
    You can pass another command that post-process the result

    Default value is 'expand("<sfile>:h:h") . "/bin/preview.rb"'


*g:fzf_preview_preview_key_bindings*
    This command determines keyboard shortcuts during an interactive FZF
    session. Options are a string passed directly to fzf's "--bind" option.

    Default value is 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'


*g:fzf_preview_fzf_color_option*
    Specify the color option to be passed to the fzf command.
    Options are a string passed directly to fzf's "--color" option.

    Default value is 'ctrl-d:preview-page-down,ctrl-u:preview-page-up,?:toggle-preview'


*g:fzf_preview_custom_processes*
    Set the custom processes.
    Dictionary format is { '{processes_name}': { '{input_key}': |String|(Global function name) or |Funcref| } }
    Default child value can be get with |fzf_preview#remote#process#get_default_processes|

    Default value is {}

    Example:  {
                'open-file': {
                  'ctrl-o': 'FzfPreviewOpenFileCtrlO',
                  'ctrl-q': 'FzfPreviewOpenFileCtrlQ',
                  'ctrl-t': 'FzfPreviewOpenFileCtrlT',
                  'ctrl-v': 'FzfPreviewOpenFileCtrlV',
                  'ctrl-x': 'FzfPreviewOpenFileCtrlX',
                  'enter': 'FzfPreviewOpenFileEnter'
                },
                'register': {
                  'enter': 'FzfPreviewRegisterEnter'
                }
              }


*g:fzf_preview_fzf_preview_window_option*
    Used as fzf preview-window option
    For example, 'up:30%'

    Default value is 'wrap'


*g:fzf_preview_filelist_postprocess_command*
    Can execute piped commands before the file list is passed to fzf
    For example, you can add color to the file list by setting 'xargs ls -U -—color' .

    Default value is ''


*g:fzf_preview_use_dev_icons*
    If this value is 1, devicons is used as fzf candidate.

    Default value is 0


*g:fzf_preview_dev_icon_prefix_string_length*
    Set how many string length devicon is represented.

    Default value is 3


*g:fzf_preview_dev_icons_limit*
    Devicons can make fzf-preview slow when the number of results is high.
    By default icons are disable when number of results is higher this value.

    Default value is 5000


*g:fzf_preview_yankround_preview_command*
    Command to preview yankround history.

    Defaul value is expand('<sfile>:h:h') . '/bin/preview_yankround_register'

*g:fzf_preview_blame_pr_command*
    Command to FzfPreviewBlamePR source.

    Defaul value is expand('<sfile>:h:h') . '/bin/git_blame_pr'

*$FZF_PREVIEW_PREVIEW_BAT_THEME*
    The theme used in the bat preview.
    Default value is 'ansi-dark'


==============================================================================
FUNCTIONS                                       *fzf-preview-functions*

*fzf_preview#remote#process#get_default_processes*
    Get the initial value of the processes.
    processes_name is 'open-file', 'open-bufnr', 'register' and 'open-pr'.

    value from 'open-file' is
      {
        'ctrl-o': 'FzfPreviewOpenFileCtrlO',
        'ctrl-q': 'FzfPreviewOpenFileCtrlQ',
        'ctrl-t': 'FzfPreviewOpenFileCtrlT',
        'ctrl-v': 'FzfPreviewOpenFileCtrlV',
        'ctrl-x': 'FzfPreviewOpenFileCtrlX',
        'enter': 'FzfPreviewOpenFileEnter'
      }

==============================================================================
DEFAULT KEYMAP                                  *fzf-preview-keymap*

<C-g>, <Esc>
  - Cancel fzf

<C-x>
  - Open split

<C-v>
  - Open vsplit

<C-t>
  - Open tabedit

<C-o>
  - Open drop

<C-q>
  - Build QuickFix

<C-d>
  - Preview page down

<C-u>
  - Preview page up

?
  - Toggle Preview

==============================================================================
EXAMPLE                                         *fzf-preview-mappings*

Here is mapping example.
>
    nnoremap <silent> <Leader>p :<C-u>FzfPreviewProjectFiles<CR>
    nnoremap <silent> <Leader>b :<C-u>FzfPreviewBuffers<CR>
    nnoremap <silent> <Leader>m :<C-u>FzfPreviewProjectOldFiles<CR>
    nnoremap <silent> <Leader>M :<C-u>FzfPreviewOldFiles<CR>
<
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
